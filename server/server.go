package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"
)

type Client struct {
	conn     net.Conn
	nickname string
	address  string
	writer   *bufio.Writer
	blocked  map[string]bool
}

type ChatServer struct {
	host         string
	port         int
	listener     net.Listener
	clients      []*Client
	mutex        sync.Mutex
	running      bool
	userHistory  map[string]string // IP -> –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∏–∫–Ω–µ–π–º
	historyMutex sync.RWMutex
}

func NewChatServer(host string, port int) *ChatServer {
	return &ChatServer{
		host:         host,
		port:         port,
		clients:      make([]*Client, 0),
		running:      false,
		userHistory:  make(map[string]string), // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
		historyMutex: sync.RWMutex{},
	}
}

func (s *ChatServer) Start() error {
	address := fmt.Sprintf("%s:%d", s.host, s.port)
	listener, err := net.Listen("tcp", address)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: %v", err)
	}

	s.listener = listener
	s.running = true

	fmt.Printf("üöÄ –ß–∞—Ç-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s\n", address)
	fmt.Println("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
	fmt.Println("–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @–Ω–∏–∫–Ω–µ–π–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	go s.handleSignals()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	for s.running {
		conn, err := s.listener.Accept()
		if err != nil {
			if s.running {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ accept: %v\n", err)
			}
			continue
		}

		clientAddr := conn.RemoteAddr().String()
		fmt.Printf("üì± –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s\n", clientAddr)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
		go s.handleClient(conn, clientAddr)
	}

	return nil
}

func (s *ChatServer) getPreviousNickname(ip string) string {
	s.historyMutex.RLock()
	defer s.historyMutex.RUnlock()

	return s.userHistory[ip]
}

func (s *ChatServer) saveNicknameHistory(ip, nickname string) {
	s.historyMutex.Lock()
	defer s.historyMutex.Unlock()

	s.userHistory[ip] = nickname
}

func (s *ChatServer) findClientByNickname(nickname string) *Client {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for _, client := range s.clients {
		if client.nickname == nickname {
			return client
		}
	}
	return nil
}

func (s *ChatServer) handleClient(conn net.Conn, address string) {
	var nickname string
	var client *Client

	defer func() {
		if client != nil {
			s.disconnectClient(client)
		} else {
			conn.Close()
		}
	}()

	// –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –∞–¥—Ä–µ—Å–∞
	ip := strings.Split(address, ":")[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ IP
	previousNickname := s.getPreviousNickname(ip)

	reader := bufio.NewReader(conn)
	writer := bufio.NewWriter(conn)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ
	if previousNickname != "" {
		prompt := fmt.Sprintf("NICK_PROMPT:%s\n", previousNickname)
		writer.WriteString(prompt)
		writer.Flush()
		fmt.Printf("üìù –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∏–∫–Ω–µ–π–º '%s' –¥–ª—è IP %s\n", previousNickname, ip)
	} else {
		writer.WriteString("NICK_REQUEST\n")
		writer.Flush()
	}

	nickRequest, err := reader.ReadString('\n')
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç %s: %v\n", address, err)
		return
	}

	nickRequest = strings.TrimSpace(nickRequest)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º
	if strings.HasPrefix(nickRequest, "NICK:") {
		nickname = strings.TrimPrefix(nickRequest, "NICK:")
		nickname = strings.TrimSpace(nickname)
	} else {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª –Ω–∏–∫–Ω–µ–π–º (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
		nickname = strings.TrimSpace(nickRequest)
	}

	if nickname == "" {
		writer.WriteString("ERROR: Nickname cannot be empty\n")
		writer.Flush()
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º
	if s.isNicknameTaken(nickname) {
		writer.WriteString("NICK_TAKEN\n")
		writer.Flush()
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	s.saveNicknameHistory(ip, nickname)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π blocked
	client = &Client{
		conn:     conn,
		nickname: nickname,
		address:  address,
		writer:   writer,
		blocked:  make(map[string]bool),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
	s.addClient(client)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	writer.WriteString("NICK_OK\n")
	writer.Flush()

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	joinMessage := fmt.Sprintf("üü¢ %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", nickname)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
	if previousNickname != "" && previousNickname == nickname {
		joinMessage = fmt.Sprintf("üü¢ %s –≤–µ—Ä–Ω—É–ª—Å—è –≤ —á–∞—Ç", nickname)
	}

	s.broadcastMessage(joinMessage, client)
	fmt.Printf("‚úÖ %s (%s) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É\n", nickname, address)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
	s.sendUserList(client)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	for s.running {
		message, err := reader.ReadString('\n')
		if err != nil {
			if s.running {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç %s: %v\n", nickname, err)
			}
			break
		}

		message = strings.TrimSpace(message)
		if message == "" {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ @–Ω–∏–∫
		if strings.HasPrefix(message, "@") {
			parts := strings.SplitN(message, " ", 2)
			if len(parts) >= 2 {
				targetNick := strings.TrimPrefix(parts[0], "@")
				privateMsg := parts[1]

				if targetNick != "" && privateMsg != "" {
					timestamp := time.Now().Format("15:04:05")
					privateMessage := fmt.Sprintf("[–õ–°][%s] %s: %s", timestamp, nickname, privateMsg)
					confirmation := fmt.Sprintf("[–õ–°][%s] –í—ã ‚Üí %s: %s", timestamp, targetNick, privateMsg)

					success := s.sendPrivateMessage(targetNick, privateMessage, client)
					if success {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
						s.sendToClient(client, confirmation)
						fmt.Printf("üíå –õ–° –æ—Ç %s –∫ %s: %s\n", nickname, targetNick, privateMsg)
					} else {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
						targetClient := s.findClientByNickname(targetNick)
						if targetClient != nil && targetClient.blocked[nickname] {
							s.sendToClient(client, fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å", targetNick))
						} else {
							s.sendToClient(client, fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ offline", targetNick))
						}
					}
					continue
				}
			}
		}

		if strings.HasPrefix(message, "#") {
			parts := strings.SplitN(message, " ", 2)
			cmd := strings.ToLower(strings.TrimPrefix(parts[0], "#"))

			switch cmd {
			case "help":
				s.sendHelp(client)
				continue
			case "users":
				s.sendUserList(client)
				continue
			case "all":
				if len(parts) < 2 {
					s.sendToClient(client, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #all —Å–æ–æ–±—â–µ–Ω–∏–µ")
					continue
				}
				msg := parts[1]
				timestamp := time.Now().Format("15:04:05")
				privateMessage := fmt.Sprintf("[–ú–õ–°][%s] %s ‚Üí –≤—Å–µ: %s", timestamp, nickname, msg)
				s.broadcastPrivateMessage(privateMessage, client)
				s.sendToClient(client, fmt.Sprintf("[–ú–õ–°][%s] –í—ã ‚Üí –≤—Å–µ: %s", timestamp, msg))
				continue
			case "block":
				if len(parts) < 2 {
					s.sendToClient(client, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #block –Ω–∏–∫")
					continue
				}
				target := parts[1]
				client.blocked[target] = true
				s.sendToClient(client, fmt.Sprintf("üö´ %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", target))
				continue
			case "unblock":
				if len(parts) < 2 {
					s.sendToClient(client, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #unblock –Ω–∏–∫")
					continue
				}
				target := parts[1]
				delete(client.blocked, target)
				s.sendToClient(client, fmt.Sprintf("‚úÖ %s —É–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", target))
				continue
			}
		}

	}
}

func (s *ChatServer) broadcastPrivateMessage(message string, sender *Client) {
	s.mutex.Lock()
	clients := make([]*Client, len(s.clients))
	copy(clients, s.clients)
	s.mutex.Unlock()

	for _, client := range clients {
		if client == sender {
			continue
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
		if client.blocked[sender.nickname] {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
		}
		s.sendToClient(client, message)
	}
}

func (s *ChatServer) sendPrivateMessage(targetNickname, message string, sender *Client) bool {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for _, client := range s.clients {
		if client.nickname == targetNickname && client != sender {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
			if client.blocked[sender.nickname] {
				return false // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
			}
			s.sendToClient(client, message)
			return true
		}
	}
	return false
}

func (s *ChatServer) sendToClient(client *Client, message string) {
	client.writer.WriteString(message + "\n")
	client.writer.Flush()
}

func (s *ChatServer) sendHelp(client *Client) {
	helpMessage := "HELP:" +
		"@–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ | " +
		"#all —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–∞—Å—Å–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ | " +
		"#users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π | " +
		"#help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ | " +
		"#block –Ω–∏–∫ - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ | " +
		"#unblock –Ω–∏–∫ - —É–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ | " +
		"/quit - –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞"
	s.sendToClient(client, helpMessage)
}
func (s *ChatServer) isNicknameTaken(nickname string) bool {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for _, client := range s.clients {
		if client.nickname == nickname {
			return true
		}
	}
	return false
}

func (s *ChatServer) addClient(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	s.clients = append(s.clients, client)
}

func (s *ChatServer) removeClient(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for i, c := range s.clients {
		if c == client {
			s.clients = append(s.clients[:i], s.clients[i+1:]...)
			break
		}
	}
}

func (s *ChatServer) broadcastMessage(message string, exclude *Client) {
	s.mutex.Lock()
	clients := make([]*Client, len(s.clients))
	copy(clients, s.clients)
	s.mutex.Unlock()

	var disconnected []*Client

	for _, client := range clients {
		if exclude != nil && client == exclude {
			continue
		}

		_, err := client.writer.WriteString(message + "\n")
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %s: %v\n", client.nickname, err)
			disconnected = append(disconnected, client)
		} else {
			client.writer.Flush()
		}
	}

	// –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	for _, client := range disconnected {
		s.removeClient(client)
		fmt.Printf("üî¥ %s –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–ø–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å)\n", client.nickname)
		client.conn.Close()
	}
}

func (s *ChatServer) sendUserList(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	var userList strings.Builder
	userList.WriteString("USERS:")
	for i, c := range s.clients {
		if i > 0 {
			userList.WriteString(",")
		}
		userList.WriteString(c.nickname)
	}

	s.sendToClient(client, userList.String())
}

func (s *ChatServer) disconnectClient(client *Client) {
	s.removeClient(client)
	client.conn.Close()

	if client.nickname != "" {
		leaveMessage := fmt.Sprintf("üî¥ %s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", client.nickname)
		s.broadcastMessage(leaveMessage, nil)
		fmt.Printf("üëã %s –æ—Ç–∫–ª—é—á–∏–ª—Å—è\n", client.nickname)
	}
}

func (s *ChatServer) Shutdown() {
	if !s.running {
		return
	}

	s.running = false
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	s.mutex.Lock()
	for _, client := range s.clients {
		client.conn.Close()
	}
	s.clients = nil
	s.mutex.Unlock()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º listener
	if s.listener != nil {
		s.listener.Close()
	}

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func (s *ChatServer) handleSignals() {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	<-sigChan
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	s.Shutdown()
	os.Exit(0)
}

func main() {
	fmt.Println("=== üí¨ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä (Go) ===")
	fmt.Println("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

	server := NewChatServer("0.0.0.0", 12345)

	err := server.Start()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		os.Exit(1)
	}
}
