package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/gorilla/websocket"
)

// JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
type Message struct {
	Type      string            `json:"type"`
	Content   string            `json:"content,omitempty"`
	From      string            `json:"from,omitempty"`
	To        string            `json:"to,omitempty"`
	Timestamp string            `json:"timestamp,omitempty"`
	Users     []string          `json:"users,omitempty"`
	Flags     map[string]bool   `json:"flags,omitempty"`
	Error     string            `json:"error,omitempty"`
	Data      map[string]string `json:"data,omitempty"`
}

type Client struct {
	conn          *websocket.Conn
	nickname      string
	address       string
	send          chan Message
	blocked       map[string]bool
	favoriteUsers map[string]bool
}

type MailboxMessage struct {
	From    string
	Message string
	Time    time.Time
}

type Mailbox struct {
	Messages []MailboxMessage
	Mutex    sync.RWMutex
}

type ChatServer struct {
	host         string
	port         int
	clients      map[*Client]bool
	mutex        sync.Mutex
	running      bool
	userHistory  map[string]string
	historyMutex sync.RWMutex
	mailboxes    map[string]*Mailbox // –Ω–∏–∫–Ω–µ–π–º -> –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫
	mailboxMutex sync.RWMutex
	upgrader     websocket.Upgrader
}

func NewChatServer(host string, port int) *ChatServer {
	return &ChatServer{
		host:        host,
		port:        port,
		clients:     make(map[*Client]bool),
		running:     false,
		userHistory: make(map[string]string),
		mailboxes:   make(map[string]*Mailbox),
		upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				return true // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
			},
		},
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
func (s *ChatServer) sendJSONMessage(client *Client, msg Message) error {
	select {
	case client.send <- msg:
		return nil
	default:
		close(client.send)
		return fmt.Errorf("–∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
	}
}

func (s *ChatServer) readJSONMessage(conn *websocket.Conn) (*Message, error) {
	_, message, err := conn.ReadMessage()
	if err != nil {
		return nil, err
	}

	var msg Message
	err = json.Unmarshal(message, &msg)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	return &msg, nil
}

func (s *ChatServer) Start() error {
	address := fmt.Sprintf("%s:%d", s.host, s.port)
	s.running = true

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –º–∞—Ä—à—Ä—É—Ç—ã
	http.HandleFunc("/ws", s.handleWebSocket)
	http.HandleFunc("/", s.handleHome)

	fmt.Printf("üöÄ WebSocket —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s\n", address)
	fmt.Println("WebSocket endpoint: ws://" + address + "/ws")
	fmt.Println("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	go s.handleSignals()

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	return http.ListenAndServe(address, nil)
}

func (s *ChatServer) handleHome(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Chat Server</title>
</head>
<body>
    <h1>WebSocket Chat Server</h1>
    <p>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º</p>
    <p>WebSocket endpoint: <code>ws://%s:%d/ws</code></p>
</body>
</html>
`, s.host, s.port)
}

func (s *ChatServer) handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := s.upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ WebSocket: %v", err)
		return
	}

	clientAddr := r.RemoteAddr
	fmt.Printf("üì± –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s\n", clientAddr)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	client := &Client{
		conn:          conn,
		address:       clientAddr,
		send:          make(chan Message, 256),
		blocked:       make(map[string]bool),
		favoriteUsers: make(map[string]bool),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
	s.addClient(client)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
	go s.writePump(client)
	go s.readPump(client)
}

// formatFullIP –ø—Ä–∏–≤–æ–¥–∏—Ç IP –∫ –ø–æ–ª–Ω–æ–º—É –≤–∏–¥—É.
// –î–ª—è IPv4 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∑–∞–ø–∏—Å—å, –¥–ª—è IPv6 —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ::1 -> 0000:0000:0000:0000:0000:0000:0000:0001)
func formatFullIP(host string) string {
	// –£–±–∏—Ä–∞–µ–º zone-id, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, fe80::1%lo0)
	if idx := strings.Index(host, "%"); idx >= 0 {
		host = host[:idx]
	}

	ip := net.ParseIP(host)
	if ip == nil {
		return host
	}
	if v4 := ip.To4(); v4 != nil {
		return v4.String()
	}
	ip16 := ip.To16()
	if ip16 == nil {
		return host
	}
	hextets := make([]string, 8)
	for i := 0; i < 8; i++ {
		hextets[i] = fmt.Sprintf("%04x", uint16(ip16[i*2])<<8|uint16(ip16[i*2+1]))
	}
	return strings.Join(hextets, ":")
}

// writePump –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
func (s *ChatServer) writePump(client *Client) {
	defer client.conn.Close()

	for {
		select {
		case message, ok := <-client.send:
			client.conn.SetWriteDeadline(time.Now().Add(10 * time.Second))
			if !ok {
				client.conn.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}

			w, err := client.conn.NextWriter(websocket.TextMessage)
			if err != nil {
				return
			}

			jsonData, err := json.Marshal(message)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
				return
			}

			w.Write(jsonData)

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º writer
			if err := w.Close(); err != nil {
				return
			}
		}
	}
}

// readPump —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func (s *ChatServer) readPump(client *Client) {
	defer func() {
		s.disconnectClient(client)
		client.conn.Close()
	}()

	// –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.handleAuthentication(client) {
		return
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		msg, err := s.readJSONMessage(client.conn)
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("‚ùå WebSocket –æ—à–∏–±–∫–∞: %v", err)
			}
			break
		}

		s.handleClientMessage(client, msg)
	}
}

func (s *ChatServer) handleAuthentication(client *Client) bool {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –∞–¥—Ä–µ—Å–∞ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IPv6 –≤ —Ñ–æ—Ä–º–∞—Ç–µ [::1]:port)
	host, _, err := net.SplitHostPort(client.address)
	if err != nil {
		host = client.address
	}
	ip := host

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ IP
	previousNickname := s.getPreviousNickname(ip)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ
	if previousNickname != "" {
		msg := Message{
			Type:    "nick_prompt",
			Content: previousNickname,
		}
		s.sendJSONMessage(client, msg)
		fmt.Printf("üìù –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∏–∫–Ω–µ–π–º '%s' –¥–ª—è IP %s\n", previousNickname, ip)
	} else {
		msg := Message{Type: "nick_request"}
		s.sendJSONMessage(client, msg)
	}

	// –ß–∏—Ç–∞–µ–º JSON —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
	nickMsg, err := s.readJSONMessage(client.conn)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç %s: %v\n", client.address, err)
		return false
	}

	if nickMsg.Type != "nick" {
		errorMsg := Message{
			Type:  "error",
			Error: "–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º",
		}
		s.sendJSONMessage(client, errorMsg)
		return false
	}

	nickname := strings.TrimSpace(nickMsg.Content)
	if nickname == "" {
		errorMsg := Message{
			Type:  "error",
			Error: "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
		}
		s.sendJSONMessage(client, errorMsg)
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º
	if s.isNicknameTaken(nickname) {
		errorMsg := Message{
			Type:  "error",
			Error: "–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç",
		}
		s.sendJSONMessage(client, errorMsg)
		return false
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	s.saveNicknameHistory(ip, nickname)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∫–ª–∏–µ–Ω—Ç–∞
	client.nickname = nickname

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	successMsg := Message{Type: "nick_ok"}
	s.sendJSONMessage(client, successMsg)

	// –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	s.deliverOfflineMessages(client)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	joinMessage := fmt.Sprintf("üü¢ %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", nickname)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
	if previousNickname != "" && previousNickname == nickname {
		joinMessage = fmt.Sprintf("üü¢ %s –≤–µ—Ä–Ω—É–ª—Å—è –≤ —á–∞—Ç", nickname)
	}

	s.broadcastJSONMessage(Message{
		Type:      "system",
		Content:   joinMessage,
		Timestamp: time.Now().Format("15:04:05"),
	}, client)
	fmt.Printf("‚úÖ %s (%s) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É\n", nickname, client.address)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
	s.sendUserListJSON(client)

	return true
}

func (s *ChatServer) getOrCreateMailbox(nickname string) *Mailbox {
	s.mailboxMutex.Lock()
	defer s.mailboxMutex.Unlock()

	if mailbox, exists := s.mailboxes[nickname]; exists {
		return mailbox
	}

	mailbox := &Mailbox{
		Messages: make([]MailboxMessage, 0),
	}
	s.mailboxes[nickname] = mailbox
	return mailbox
}

func (s *ChatServer) addOfflineMessage(to, from, message string) bool {
	mailbox := s.getOrCreateMailbox(to)
	mailbox.Mutex.Lock()
	defer mailbox.Mutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 10)
	if len(mailbox.Messages) >= 10 {
		return false // –Ø—â–∏–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
	}

	mailbox.Messages = append(mailbox.Messages, MailboxMessage{
		From:    from,
		Message: message,
		Time:    time.Now(),
	})
	return true
}

func (s *ChatServer) deliverOfflineMessages(client *Client) {
	mailbox := s.getOrCreateMailbox(client.nickname)
	mailbox.Mutex.Lock()
	defer mailbox.Mutex.Unlock()

	if len(mailbox.Messages) == 0 {
		return
	}

	// –î–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, msg := range mailbox.Messages {
		timestamp := msg.Time.Format("15:04:05")
		s.sendJSONMessage(client, Message{
			Type:      "offline_message",
			Content:   msg.Message,
			From:      msg.From,
			Timestamp: timestamp,
			Flags:     map[string]bool{"offline": true},
		})
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	s.sendJSONMessage(client, Message{
		Type:    "offline_delivered",
		Content: fmt.Sprintf("–í–∞–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ %d –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", len(mailbox.Messages)),
	})

	// –û—á–∏—â–∞–µ–º —è—â–∏–∫ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
	mailbox.Messages = make([]MailboxMessage, 0)
}

func (s *ChatServer) getMailboxStatusJSON(client *Client) {
	mailbox := s.getOrCreateMailbox(client.nickname)
	mailbox.Mutex.RLock()
	defer mailbox.Mutex.RUnlock()

	count := len(mailbox.Messages)
	if count == 0 {
		s.sendJSONMessage(client, Message{
			Type:    "mailbox_status",
			Content: "–í–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—É—Å—Ç",
		})
	} else {
		s.sendJSONMessage(client, Message{
			Type:    "mailbox_status",
			Content: fmt.Sprintf("–£ –≤–∞—Å %d –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", count),
		})
	}
}

func (s *ChatServer) getPreviousNickname(ip string) string {
	s.historyMutex.RLock()
	defer s.historyMutex.RUnlock()

	return s.userHistory[ip]
}

func (s *ChatServer) saveNicknameHistory(ip, nickname string) {
	s.historyMutex.Lock()
	defer s.historyMutex.Unlock()

	s.userHistory[ip] = nickname
}

func (s *ChatServer) findClientByNickname(nickname string) *Client {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for client := range s.clients {
		if client.nickname == nickname {
			return client
		}
	}
	return nil
}

func (s *ChatServer) handleClientMessage(client *Client, msg *Message) {
	switch msg.Type {
	case "message":
		// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
		s.broadcastJSONMessage(Message{
			Type:      "chat",
			Content:   msg.Content,
			From:      client.nickname,
			Timestamp: time.Now().Format("15:04:05"),
			Flags:     msg.Flags,
		}, client)

	case "private":
		// –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		targetClient := s.findClientByNickname(msg.To)
		if targetClient != nil && targetClient != client {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
			if targetClient.blocked[client.nickname] {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å", msg.To),
				})
				return
			}

			timestamp := time.Now().Format("15:04:05")
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
			privateMsg := Message{
				Type:      "private",
				Content:   msg.Content,
				From:      client.nickname,
				To:        msg.To,
				Timestamp: timestamp,
				Flags:     map[string]bool{"private": true},
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ "favorite" –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –ª—é–±–∏–º—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
			if targetClient.favoriteUsers[client.nickname] {
				privateMsg.Flags["favorite"] = true
			}

			s.sendJSONMessage(targetClient, privateMsg)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
			s.sendJSONMessage(client, Message{
				Type:      "private_sent",
				Content:   msg.Content,
				From:      client.nickname,
				To:        msg.To,
				Timestamp: timestamp,
				Flags:     map[string]bool{"private": true},
			})
			fmt.Printf("üíå –õ–° –æ—Ç %s –∫ %s: %s\n", client.nickname, msg.To, msg.Content)
		} else {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if msg.To == client.nickname {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ",
				})
				return
			}

			success := s.addOfflineMessage(msg.To, client.nickname, msg.Content)
			if success {
				timestamp := time.Now().Format("15:04:05")
				s.sendJSONMessage(client, Message{
					Type:      "offline_saved",
					Content:   fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω)", msg.To),
					Timestamp: timestamp,
				})
				fmt.Printf("üìÆ %s –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s (–æ—Ñ—Ñ–ª–∞–π–Ω): %s\n", client.nickname, msg.To, msg.Content)
			} else {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: fmt.Sprintf("–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω (–º–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π)", msg.To),
				})
			}
		}

	case "command":
		s.handleCommand(client, msg)

	default:
		s.sendJSONMessage(client, Message{
			Type:  "error",
			Error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è",
		})
	}
}

func (s *ChatServer) handleCommand(client *Client, msg *Message) {
	cmd := msg.Data["command"]

	switch cmd {
	case "help":
		s.sendHelpJSON(client)
	case "users":
		s.sendUserListJSON(client)
	case "mailbox":
		s.getMailboxStatusJSON(client)
	case "ip":
		target := msg.Data["target"]
		if target == "" {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #ip –Ω–∏–∫",
			})
			return
		}
		targetClient := s.findClientByNickname(target)
		if targetClient == nil {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω", target),
			})
			return
		}
		host, _, err := net.SplitHostPort(targetClient.address)
		if err != nil {
			host = targetClient.address
		}
		parsed := net.ParseIP(host)
		if parsed == nil {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP",
			})
			return
		}
		var ipOut string
		if v4 := parsed.To4(); v4 != nil {
			ipOut = v4.String()
		} else if parsed.IsLoopback() {
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º IPv4 –¥–ª—è loopback
			ipOut = "127.0.0.1"
		} else {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: fmt.Sprintf("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ IPv6, IPv4 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", target),
			})
			return
		}
		s.sendJSONMessage(client, Message{
			Type:    "ip",
			Content: fmt.Sprintf("IPv4: %s", ipOut),
			Data:    map[string]string{"user": target, "ip": ipOut, "family": "IPv4"},
		})
	case "all":
		content := msg.Data["content"]
		if content == "" {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #all —Å–æ–æ–±—â–µ–Ω–∏–µ",
			})
			return
		}
		timestamp := time.Now().Format("15:04:05")
		s.broadcastJSONMessage(Message{
			Type:      "mass_private",
			Content:   content,
			From:      client.nickname,
			Timestamp: timestamp,
			Flags:     map[string]bool{"mass_private": true},
		}, client)
		s.sendJSONMessage(client, Message{
			Type:      "mass_private_sent",
			Content:   content,
			From:      client.nickname,
			Timestamp: timestamp,
			Flags:     map[string]bool{"mass_private": true},
		})

	case "block":
		target := msg.Data["target"]
		if target == "" {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #block –Ω–∏–∫",
			})
			return
		}
		client.blocked[target] = true
		s.sendJSONMessage(client, Message{
			Type:    "blocked",
			Content: fmt.Sprintf("%s –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", target),
		})

	case "unblock":
		target := msg.Data["target"]
		if target == "" {
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #unblock –Ω–∏–∫",
			})
			return
		}
		delete(client.blocked, target)
		s.sendJSONMessage(client, Message{
			Type:    "unblocked",
			Content: fmt.Sprintf("%s —É–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", target),
		})

	case "fav":
		action := msg.Data["action"]
		target := msg.Data["target"]

		switch action {
		case "list":
			if len(client.favoriteUsers) == 0 {
				s.sendJSONMessage(client, Message{
					Type:    "fav_list",
					Users:   []string{},
					Content: "–í–∞—à —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç",
				})
			} else {
				var favList []string
				for user := range client.favoriteUsers {
					favList = append(favList, user)
				}
				s.sendJSONMessage(client, Message{
					Type:    "fav_list",
					Users:   favList,
					Content: fmt.Sprintf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –ø–∏—Å–∞—Ç–µ–ª–∏ (%d): %s", len(favList), strings.Join(favList, ", ")),
				})
			}
		case "clear":
			client.favoriteUsers = make(map[string]bool)
			s.sendJSONMessage(client, Message{
				Type:    "fav_cleared",
				Content: "–°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω",
			})
		case "add", "remove":
			if target == "" {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: "–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				})
				return
			}

			if target == client.nickname {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –ª—é–±–∏–º—ã–µ –ø–∏—Å–∞—Ç–µ–ª–∏",
				})
				return
			}

			if !s.isNicknameTaken(target) {
				s.sendJSONMessage(client, Message{
					Type:  "error",
					Error: fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω", target),
				})
				return
			}

			if action == "add" {
				if client.favoriteUsers[target] {
					s.sendJSONMessage(client, Message{
						Type:  "error",
						Error: fmt.Sprintf("%s —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π", target),
					})
				} else {
					client.favoriteUsers[target] = true
					s.sendJSONMessage(client, Message{
						Type:    "fav_added",
						Content: fmt.Sprintf("%s –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π", target),
						Data:    map[string]string{"user": target},
					})
				}
			} else { // remove
				if !client.favoriteUsers[target] {
					s.sendJSONMessage(client, Message{
						Type:  "error",
						Error: fmt.Sprintf("%s –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π", target),
					})
				} else {
					delete(client.favoriteUsers, target)
					s.sendJSONMessage(client, Message{
						Type:    "fav_removed",
						Content: fmt.Sprintf("%s —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π", target),
						Data:    map[string]string{"user": target},
					})
				}
			}
		default:
			s.sendJSONMessage(client, Message{
				Type:  "error",
				Error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ fav",
			})
		}

	default:
		s.sendJSONMessage(client, Message{
			Type:  "error",
			Error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
		})
	}
}

func (s *ChatServer) broadcastJSONMessage(msg Message, exclude *Client) {
	s.mutex.Lock()
	clients := make(map[*Client]bool)
	for client := range s.clients {
		clients[client] = true
	}
	s.mutex.Unlock()

	var disconnected []*Client

	for client := range clients {
		if exclude != nil && client == exclude {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ª–∏—á–Ω—ã—Ö –∏ –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if (msg.Type == "private" || msg.Type == "mass_private") && client.blocked[msg.From] {
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
		clientMsg := msg

		// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ "favorite" –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –ª—é–±–∏–º—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
		if (msg.Type == "chat" || msg.Type == "mass_private") && client.favoriteUsers[msg.From] {
			if clientMsg.Flags == nil {
				clientMsg.Flags = make(map[string]bool)
			}
			clientMsg.Flags["favorite"] = true
		}

		err := s.sendJSONMessage(client, clientMsg)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %s: %v\n", client.nickname, err)
			disconnected = append(disconnected, client)
		}
	}

	// –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	for _, client := range disconnected {
		s.removeClient(client)
		fmt.Printf("üî¥ %s –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–ø–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å)\n", client.nickname)
		client.conn.Close()
	}
}

func (s *ChatServer) sendHelpJSON(client *Client) {
	helpData := map[string]string{
		"@–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ": "–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		"#all —Å–æ–æ–±—â–µ–Ω–∏–µ": "–º–∞—Å—Å–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		"#users":         "—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
		"#help":          "—ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
		"#mailbox":       "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫",
		"#ip –Ω–∏–∫":        "—É–∑–Ω–∞—Ç—å IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		"#fav [–Ω–∏–∫]":     "–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è",
		"#fav list":      "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫",
		"#fav clear":     "–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
		"#block –Ω–∏–∫":     "–¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
		"#unblock –Ω–∏–∫":   "—É–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
		"/quit":          "–≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞",
	}

	s.sendJSONMessage(client, Message{
		Type: "help",
		Data: helpData,
	})
}
func (s *ChatServer) isNicknameTaken(nickname string) bool {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	for client := range s.clients {
		if client.nickname == nickname {
			return true
		}
	}
	return false
}

func (s *ChatServer) addClient(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	s.clients[client] = true
}

func (s *ChatServer) removeClient(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	delete(s.clients, client)
}

func (s *ChatServer) sendUserListJSON(client *Client) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	var users []string
	for c := range s.clients {
		users = append(users, c.nickname)
	}

	s.sendJSONMessage(client, Message{
		Type:  "users",
		Users: users,
	})
}

func (s *ChatServer) disconnectClient(client *Client) {
	s.removeClient(client)
	client.conn.Close()

	if client.nickname != "" {
		leaveMessage := fmt.Sprintf("üî¥ %s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", client.nickname)
		s.broadcastJSONMessage(Message{
			Type:      "system",
			Content:   leaveMessage,
			Timestamp: time.Now().Format("15:04:05"),
		}, nil)
		fmt.Printf("üëã %s –æ—Ç–∫–ª—é—á–∏–ª—Å—è\n", client.nickname)
	}
}

func (s *ChatServer) userExistsInHistory(nickname string) bool {
	s.historyMutex.RLock()
	defer s.historyMutex.RUnlock()

	for _, storedNickname := range s.userHistory {
		if storedNickname == nickname {
			return true
		}
	}
	return false
}

func (s *ChatServer) Shutdown() {
	if !s.running {
		return
	}

	s.running = false
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	s.mutex.Lock()
	for client := range s.clients {
		close(client.send)
		client.conn.Close()
	}
	s.clients = make(map[*Client]bool)
	s.mutex.Unlock()

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func (s *ChatServer) handleSignals() {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	<-sigChan
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	s.Shutdown()
	os.Exit(0)
}

func getServerConfig() (string, int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	host := os.Getenv("SERVER_HOST")
	portStr := os.Getenv("SERVER_PORT")

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
	if host == "" && portStr == "" {
		reader := bufio.NewReader(os.Stdin)

		fmt.Println("=== üí¨ WebSocket —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä (Go) ===")
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)")
		fmt.Print("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ [0.0.0.0]: ")

		hostInput, _ := reader.ReadString('\n')
		hostInput = strings.TrimSpace(hostInput)

		if hostInput == "" {
			hostInput = "0.0.0.0"
		}

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12345): ")
		portInput, _ := reader.ReadString('\n')
		portInput = strings.TrimSpace(portInput)

		var port int
		if portInput == "" {
			port = 12345
		} else {
			if _, err := fmt.Sscanf(portInput, "%d", &port); err != nil || port <= 0 || port >= 65536 {
				fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12345\n")
				port = 12345
			}
		}

		return hostInput, port
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if host == "" {
		host = "0.0.0.0"
	}

	var port int
	if portStr == "" {
		port = 12345
	} else {
		if _, err := fmt.Sscanf(portStr, "%d", &port); err != nil || port <= 0 || port >= 65536 {
			fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è SERVER_PORT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12345\n")
			port = 12345
		}
	}

	fmt.Println("=== üí¨ WebSocket —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä (Go) ===")
	fmt.Printf("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n")
	fmt.Printf("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: %s\n", host)
	fmt.Printf("–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: %d\n", port)

	return host, port
}

func main() {
	host, port := getServerConfig()

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ %s:%d\n", host, port)
	fmt.Println("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
	fmt.Println()

	server := NewChatServer(host, port)

	err := server.Start()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		os.Exit(1)
	}
}
