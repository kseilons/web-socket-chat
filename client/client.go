package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net/url"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/gorilla/websocket"
)

// JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
type Message struct {
	Type      string            `json:"type"`
	Content   string            `json:"content,omitempty"`
	From      string            `json:"from,omitempty"`
	To        string            `json:"to,omitempty"`
	Timestamp string            `json:"timestamp,omitempty"`
	Users     []string          `json:"users,omitempty"`
	Flags     map[string]bool   `json:"flags,omitempty"`
	Error     string            `json:"error,omitempty"`
	Data      map[string]string `json:"data,omitempty"`
}

type ChatClient struct {
	conn          *websocket.Conn
	nickname      string
	server        string
	port          int
	running       bool
	consoleReader *bufio.Reader
	done          chan struct{}
}

func NewChatClient(server string, port int) *ChatClient {
	return &ChatClient{
		server:        server,
		port:          port,
		running:       true,
		consoleReader: bufio.NewReader(os.Stdin),
		done:          make(chan struct{}),
	}
}

func (c *ChatClient) Connect() error {
	u := url.URL{Scheme: "ws", Host: fmt.Sprintf("%s:%d", c.server, c.port), Path: "/ws"}

	fmt.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s...\n", u.String())

	conn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}

	c.conn = conn
	fmt.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É %s\n", u.String())
	return nil
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
func (c *ChatClient) sendJSONMessage(msg Message) error {
	jsonData, err := json.Marshal(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
	}

	return c.conn.WriteMessage(websocket.TextMessage, jsonData)
}

func (c *ChatClient) readJSONMessage() (*Message, error) {
	_, message, err := c.conn.ReadMessage()
	if err != nil {
		return nil, err
	}

	var msg Message
	err = json.Unmarshal(message, &msg)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	return &msg, nil
}

func (c *ChatClient) Login() error {
	// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	initialMsg, err := c.readJSONMessage()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	var nickname string

	if initialMsg.Type == "nick_prompt" {
		// –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º
		suggestedNick := initialMsg.Content

		fmt.Printf("üïí –ù–∞–π–¥–µ–Ω –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: %s\n", suggestedNick)
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: ")

		input, err := c.consoleReader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v", err)
		}

		input = strings.TrimSpace(input)
		if input == "" {
			nickname = suggestedNick
			fmt.Printf("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: %s\n", nickname)
		} else {
			nickname = input
		}
	} else if initialMsg.Type == "nick_request" {
		// –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º: ")
		input, err := c.consoleReader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞: %v", err)
		}
		nickname = strings.TrimSpace(input)
	} else {
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", initialMsg.Type)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —Å–µ—Ä–≤–µ—Ä—É
	c.nickname = nickname
	nickMsg := Message{
		Type:    "nick",
		Content: nickname,
	}
	err = c.sendJSONMessage(nickMsg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	response, err := c.readJSONMessage()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	if response.Type == "error" {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s", response.Error)
	}

	if response.Type != "nick_ok" {
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", response.Type)
	}

	fmt.Println("‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏–Ω—è—Ç —Å–µ—Ä–≤–µ—Ä–æ–º")
	return nil
}

func (c *ChatClient) Start() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	go c.readMessages()

	fmt.Println("\nüí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WebSocket —á–∞—Ç!")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  #help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("  #users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println("  #fav [–Ω–∏–∫] - –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è")
	fmt.Println("  #fav list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö")
	fmt.Println("  #fav clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
	fmt.Println("  #all —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–∞—Å—Å–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	fmt.Println("  @–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	fmt.Println("  #mailbox - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫")
	fmt.Println("  #last <–Ω–∏–∫> - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	fmt.Println("  #block –Ω–∏–∫ - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
	fmt.Println("  #unblock –Ω–∏–∫ - —É–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
	fmt.Println("  #color - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
	fmt.Println("  #color #hex - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF0000)")
	fmt.Println("  #log - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞")
	fmt.Println("  #wordlengths - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ –¥–ª–∏–Ω —Å–ª–æ–≤")
	fmt.Println("  #UserZabor - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º ¬´–∑–∞–±–æ—Ä¬ª –¥–ª—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
	fmt.Println("  /quit - –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
	fmt.Println(strings.Repeat("=", 50))

	for c.running {
		fmt.Print("> ")
		message, err := c.consoleReader.ReadString('\n')
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v\n", err)
			continue
		}

		message = strings.TrimSpace(message)

		if message == "/quit" {
			fmt.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
			c.running = false
			break
		}

		if message == "" {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if strings.HasPrefix(message, "#") {
			c.handleCommand(message)
		} else if strings.HasPrefix(message, "@") {
			c.handlePrivateMessage(message)
		} else {
			// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := Message{
				Type:    "message",
				Content: message,
			}
			err = c.sendJSONMessage(msg)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
				c.running = false
				break
			}
		}
	}

	c.cleanup()
}

func (c *ChatClient) handleCommand(message string) {
	parts := strings.SplitN(message, " ", 2)
	cmd := strings.ToLower(strings.TrimPrefix(parts[0], "#"))

	msg := Message{
		Type: "command",
		Data: make(map[string]string),
	}
	msg.Data["command"] = cmd

	switch cmd {
	case "help", "users", "mailbox", "wordlengths", "userzabor":
		// –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	case "last":
		if len(parts) < 2 {
			fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #last <–Ω–∏–∫>")
			return
		}
		msg.Data["target"] = parts[1]
	case "all":
		if len(parts) < 2 {
			fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #all —Å–æ–æ–±—â–µ–Ω–∏–µ")
			return
		}
		msg.Data["content"] = parts[1]
	case "block", "unblock":
		if len(parts) < 2 {
			fmt.Printf("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #%s –Ω–∏–∫\n", cmd)
			return
		}
		msg.Data["target"] = parts[1]
	case "color":
		if len(parts) >= 2 {
			msg.Data["target"] = parts[1]
		}
	case "fav":
		if len(parts) < 2 {
			msg.Data["action"] = "list"
		} else {
			subParts := strings.SplitN(parts[1], " ", 2)
			if len(subParts) == 1 {
				if strings.ToLower(subParts[0]) == "list" {
					msg.Data["action"] = "list"
				} else if strings.ToLower(subParts[0]) == "clear" {
					msg.Data["action"] = "clear"
				} else {
					msg.Data["action"] = "add"
					msg.Data["target"] = subParts[0]
				}
			} else {
				msg.Data["action"] = subParts[0]
				msg.Data["target"] = subParts[1]
			}
		}
	case "log":
		// Directly send the log command without redundant calls
	default:
		fmt.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n", cmd)
		return
	}

	err := c.sendJSONMessage(msg)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
	}
}

func (c *ChatClient) handlePrivateMessage(message string) {
	parts := strings.SplitN(message, " ", 2)
	if len(parts) < 2 {
		fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: @–Ω–∏–∫–Ω–µ–π–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
		return
	}

	targetNick := strings.TrimPrefix(parts[0], "@")
	privateMsg := parts[1]

	msg := Message{
		Type:    "private",
		Content: privateMsg,
		To:      targetNick,
	}

	err := c.sendJSONMessage(msg)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
	}
}

func (c *ChatClient) requestLog() {
	msg := Message{
		Type: "command",
		Data: map[string]string{"command": "log"},
	}
	err := c.conn.WriteJSON(msg)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞: %v\n", err)
	}
}

func (c *ChatClient) readMessages() {
	for c.running {
		msg, err := c.readJSONMessage()
		if err != nil {
			if c.running {
				fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
				fmt.Println("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
			}
			c.running = false
			break
		}

		c.handleServerMessage(msg)
	}
}

func (c *ChatClient) handleServerMessage(msg *Message) {
	switch msg.Type {
	case "chat":
		// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
		c.printChatMessage(msg)
	case "private":
		// –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		c.printPrivateMessage(msg)
	case "private_sent":
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
		// –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	case "mass_private":
		// –ú–∞—Å—Å–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		c.printMassPrivateMessage(msg)
	case "mass_private_sent":
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
		// –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	case "system":
		// –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		c.printSystemMessage(msg)
	case "users":
		// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		c.handleUserList(msg)
	case "help":
		// –°–ø—Ä–∞–≤–∫–∞
		c.handleHelp(msg)
	case "mailbox_status":
		// –°—Ç–∞—Ç—É—Å –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
		c.printMailboxStatus(msg)
	case "last_result":
		// –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã #last
		if msg.From != "" {
			fmt.Printf("\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç %s (%s): %s\n> ", msg.From, msg.Timestamp, msg.Content)
		} else {
			fmt.Printf("\n%s\n> ", msg.Content)
		}
	case "offline_message":
		// –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		c.printOfflineMessage(msg)
	case "offline_delivered":
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		c.printOfflineDelivered(msg)
	case "offline_saved":
		// –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		c.printOfflineSaved(msg)
	case "fav_list":
		// –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π
		c.handleFavList(msg)
	case "fav_added":
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª—é–±–∏–º—ã–µ
		c.printFavAdded(msg)
	case "fav_removed":
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ª—é–±–∏–º—ã—Ö
		c.printFavRemoved(msg)
	case "fav_cleared":
		// –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –æ—á–∏—â–µ–Ω
		c.printFavCleared(msg)
	case "blocked":
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
		c.printBlocked(msg)
	case "unblocked":
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
		c.printUnblocked(msg)
	case "color_set":
		// –¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		c.printColorSet(msg)
	case "log":
		fmt.Println("\nüìú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
		fmt.Println(strings.Repeat("‚îÄ", 60))
		fmt.Println(msg.Content)
		fmt.Println(strings.Repeat("‚îÄ", 60))
	case "wordlengths_toggle":
		// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑–∞ –¥–ª–∏–Ω —Å–ª–æ–≤
		c.printWordLengthsToggle(msg)
	case "error":
		// –û—à–∏–±–∫–∞
		c.printError(msg)
	default:
		fmt.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", msg.Type)
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *ChatClient) printChatMessage(msg *Message) {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	color := ""
	if msg.Data != nil {
		color = msg.Data["color"]
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	if msg.Flags != nil && msg.Flags["favorite"] {
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n\033[1;33m‚ú® %s: %s\033[0m\n> ", msg.From, coloredContent)
	} else {
		// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n%s: %s\n> ", msg.From, coloredContent)
	}
}

func (c *ChatClient) printPrivateMessage(msg *Message) {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	color := ""
	if msg.Data != nil {
		color = msg.Data["color"]
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	if msg.Flags != nil && msg.Flags["favorite"] {
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n\033[1;33m‚ú® %s: %s\033[0m\n> ", msg.From, coloredContent)
	} else {
		// –û–±—ã—á–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n\033[36m%s: %s\033[0m\n> ", msg.From, coloredContent)
	}
}

func (c *ChatClient) printPrivateSentMessage(msg *Message) {
	fmt.Printf("\n\033[36m–í—ã ‚Üí %s: %s\033[0m\n> ", msg.To, msg.Content)
}

func (c *ChatClient) printMassPrivateMessage(msg *Message) {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	color := ""
	if msg.Data != nil {
		color = msg.Data["color"]
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	if msg.Flags != nil && msg.Flags["favorite"] {
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n\033[1;33m‚ú® %s: %s\033[0m\n> ", msg.From, coloredContent)
	} else {
		// –û–±—ã—á–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		coloredContent := getColoredText(msg.Content, color)
		fmt.Printf("\n\033[35m%s: %s\033[0m\n> ", msg.From, coloredContent)
	}
}

func (c *ChatClient) printMassPrivateSentMessage(msg *Message) {
	fmt.Printf("\n\033[35m–í—ã: %s\033[0m\n> ", msg.Content)
}

func (c *ChatClient) printSystemMessage(msg *Message) {
	fmt.Printf("\n%s\n> ", msg.Content)
}

func (c *ChatClient) printMailboxStatus(msg *Message) {
	fmt.Printf("\nüì¨ %s\n> ", msg.Content)
}

func (c *ChatClient) printOfflineMessage(msg *Message) {
	fmt.Printf("\n\033[33m[üìÆ] %s (–æ—Ñ—Ñ–ª–∞–π–Ω): %s\033[0m\n> ", msg.From, msg.Content)
}

func (c *ChatClient) printOfflineDelivered(msg *Message) {
	fmt.Printf("\nüì¨ %s\n> ", msg.Content)
}

func (c *ChatClient) printOfflineSaved(msg *Message) {
	fmt.Printf("\nüìÆ %s\n> ", msg.Content)
}

func (c *ChatClient) printFavAdded(msg *Message) {
	fmt.Printf("\n‚ù§Ô∏è %s\n> ", msg.Content)
}

func (c *ChatClient) printFavRemoved(msg *Message) {
	fmt.Printf("\n‚úÖ %s\n> ", msg.Content)
}

func (c *ChatClient) printFavCleared(msg *Message) {
	fmt.Printf("\n‚úÖ %s\n> ", msg.Content)
}

func (c *ChatClient) printBlocked(msg *Message) {
	fmt.Printf("\nüö´ %s\n> ", msg.Content)
}

func (c *ChatClient) printUnblocked(msg *Message) {
	fmt.Printf("\n‚úÖ %s\n> ", msg.Content)
}

func (c *ChatClient) printColorSet(msg *Message) {
	fmt.Printf("\nüé® %s\n> ", msg.Content)
}

func (c *ChatClient) printWordLengthsToggle(msg *Message) {
	fmt.Printf("\nüî¢ %s\n> ", msg.Content)
}

func (c *ChatClient) printError(msg *Message) {
	fmt.Printf("\n‚ùå %s\n> ", msg.Error)
}

// hexToANSI converts a hex color to ANSI color code
func hexToANSI(hex string) string {
	if hex == "" || len(hex) != 7 || hex[0] != '#' {
		return ""
	}

	// Parse hex values
	r, err1 := strconv.ParseInt(hex[1:3], 16, 64)
	g, err2 := strconv.ParseInt(hex[3:5], 16, 64)
	b, err3 := strconv.ParseInt(hex[5:7], 16, 64)

	if err1 != nil || err2 != nil || err3 != nil {
		return ""
	}

	// Convert to ANSI 256 color (approximation)
	ansi := 16 + (r/51)*36 + (g/51)*6 + (b / 51)
	return fmt.Sprintf("\033[38;5;%dm", ansi)
}

// getColoredText returns text with color if color is provided
func getColoredText(text, color string) string {
	if color == "" {
		return text
	}
	ansiColor := hexToANSI(color)
	if ansiColor == "" {
		return text
	}
	return ansiColor + text + "\033[0m"
}

func (c *ChatClient) handleUserList(msg *Message) {
	fmt.Printf("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω (%d):\n", len(msg.Users))
	for _, user := range msg.Users {
		if user != "" {
			status := "üü¢"
			if user == c.nickname {
				status = "üü° (–≤—ã)"
			}
			fmt.Printf("%s %s\n", status, user)
		}
	}
	fmt.Print("> ")
}

func (c *ChatClient) handleHelp(msg *Message) {
	fmt.Printf("\n\033[1;34müìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —á–∞—Ç–∞:\033[0m\n")
	fmt.Println(strings.Repeat("‚îÄ", 60))

	for cmd, desc := range msg.Data {
		fmt.Printf("\033[1;32m%-25s\033[0m %s\n", cmd, desc)
	}

	fmt.Println(strings.Repeat("‚îÄ", 60))
	fmt.Print("> ")
}

func (c *ChatClient) handleFavList(msg *Message) {
	if len(msg.Users) == 0 {
		fmt.Printf("\nüìù %s\n> ", msg.Content)
	} else {
		fmt.Printf("\n‚ù§Ô∏è %s\n> ", msg.Content)
	}
}

func (c *ChatClient) cleanup() {
	if c.conn != nil {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		c.conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
		time.Sleep(time.Second) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
		c.conn.Close()
	}
	fmt.Println("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
}

func (c *ChatClient) WaitForInterrupt() {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	<-sigChan
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
	c.running = false
	c.cleanup()
	os.Exit(0)
}

func getServerAddress() (string, int) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Println("=== üí¨ Go –∫–ª–∏–µ–Ω—Ç –¥–ª—è —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–∞ ===")
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost:12345)")
	fmt.Print("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ [localhost]: ")

	serverInput, _ := reader.ReadString('\n')
	serverInput = strings.TrimSpace(serverInput)

	if serverInput == "" {
		return "localhost", 12345
	}

	if strings.Contains(serverInput, ":") {
		parts := strings.Split(serverInput, ":")
		if len(parts) == 2 {
			server := parts[0]
			var port int
			if _, err := fmt.Sscanf(parts[1], "%d", &port); err == nil && port > 0 && port < 65536 {
				return server, port
			}
		}
	}

	return serverInput, 12345
}

func main() {
	server, port := getServerAddress()

	fmt.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s:%d...\n", server, port)

	client := NewChatClient(server, port)
	go client.WaitForInterrupt()

	err := client.Connect()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v\n", err)
		os.Exit(1)
	}
	defer client.cleanup()

	err = client.Login()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: %v\n", err)
		os.Exit(1)
	}

	client.Start()
}
