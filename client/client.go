package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/signal"
	"strings"
	"syscall"
)

type ChatClient struct {
	conn          net.Conn
	nickname      string
	server        string
	port          int
	running       bool
	reader        *bufio.Reader
	writer        *bufio.Writer
	favoriteUser  string
	consoleReader *bufio.Reader
	blocked       map[string]bool // –ª–æ–∫–∞–ª—å–Ω—ã–π —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	favoriteUsers map[string]bool
}

func NewChatClient(server string, port int) *ChatClient {
	return &ChatClient{
		server:        server,
		port:          port,
		running:       true,
		consoleReader: bufio.NewReader(os.Stdin),
		blocked:       make(map[string]bool),
		favoriteUsers: make(map[string]bool),
	}
}

func (c *ChatClient) Connect() error {
	address := fmt.Sprintf("%s:%d", c.server, c.port)
	conn, err := net.Dial("tcp", address)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}

	c.conn = conn
	c.reader = bufio.NewReader(conn)
	c.writer = bufio.NewWriter(conn)

	fmt.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É %s\n", address)
	return nil
}

func (c *ChatClient) Login() error {
	// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	initialResponse, err := c.reader.ReadString('\n')
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	initialResponse = strings.TrimSpace(initialResponse)

	var nickname string

	if strings.HasPrefix(initialResponse, "NICK_PROMPT:") {
		// –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º
		suggestedNick := strings.TrimPrefix(initialResponse, "NICK_PROMPT:")
		suggestedNick = strings.TrimSpace(suggestedNick)

		fmt.Printf("üïí –ù–∞–π–¥–µ–Ω –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: %s\n", suggestedNick)
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: ")

		input, err := c.consoleReader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v", err)
		}

		input = strings.TrimSpace(input)
		if input == "" {
			nickname = suggestedNick
			fmt.Printf("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: %s\n", nickname)
		} else {
			nickname = input
		}
	} else if initialResponse == "NICK_REQUEST" {
		// –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º: ")
		input, err := c.consoleReader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞: %v", err)
		}
		nickname = strings.TrimSpace(input)
	} else {
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", initialResponse)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —Å–µ—Ä–≤–µ—Ä—É
	c.nickname = nickname
	nickMsg := fmt.Sprintf("NICK:%s\n", nickname)
	_, err = c.writer.WriteString(nickMsg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞: %v", err)
	}
	c.writer.Flush()

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	response, err := c.reader.ReadString('\n')
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	response = strings.TrimSpace(response)
	if response == "NICK_TAKEN" {
		return fmt.Errorf("–Ω–∏–∫–Ω–µ–π–º '%s' —É–∂–µ –∑–∞–Ω—è—Ç", nickname)
	}

	if response != "NICK_OK" {
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", response)
	}

	fmt.Println("‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏–Ω—è—Ç —Å–µ—Ä–≤–µ—Ä–æ–º")
	return nil
}

func (c *ChatClient) Start() {
	go c.readMessages()

	fmt.Println("\nüí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  #help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("  #users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println("  #fav [–Ω–∏–∫] - –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è")
	fmt.Println("  #fav list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö")
	fmt.Println("  #fav clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
	fmt.Println("  #all —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–∞—Å—Å–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	fmt.Println("  @–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	fmt.Println("  #mailbox - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫")
	fmt.Println("  #block –Ω–∏–∫ - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
	fmt.Println("  #unblock –Ω–∏–∫ - —É–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
	fmt.Println("  /quit - –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
	fmt.Println(strings.Repeat("=", 50))

	for c.running {
		fmt.Print("> ")
		message, err := c.consoleReader.ReadString('\n')
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v\n", err)
			continue
		}

		message = strings.TrimSpace(message)

		if message == "/quit" {
			fmt.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
			c.running = false
			break
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã #fav –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
		if strings.HasPrefix(message, "#fav") {
			// –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ readMessages
			_, err = c.writer.WriteString(message + "\n")
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
			} else {
				c.writer.Flush()
			}
			continue
		}

		if message == "" {
			continue
		}

		_, err = c.writer.WriteString(message + "\n")
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
			c.running = false
			break
		}
		c.writer.Flush()
	}

	c.cleanup()
}

func (c *ChatClient) readMessages() {
	for c.running {
		message, err := c.reader.ReadString('\n')
		if err != nil {
			if c.running {
				fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
				fmt.Println("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
			}
			c.running = false
			break
		}

		message = strings.TrimSpace(message)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏–π
		if strings.HasPrefix(message, "USERS:") {
			c.handleUserList(message)
			continue
		}

		if strings.HasPrefix(message, "[üìÆ]") {
			c.printFormattedMessage(message)
			continue
		}

		if strings.HasPrefix(message, "HELP:") {
			c.handleHelp(message)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ FAV_ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
		if strings.HasPrefix(message, "FAV_") {
			c.handleFavResponse(message)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
		if c.isMessageBlocked(message) {
			continue
		}

		// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		c.printFormattedMessage(message)
	}
}

func (c *ChatClient) handleFavResponse(message string) {
	if strings.HasPrefix(message, "FAV_LIST:") {
		favListStr := strings.TrimPrefix(message, "FAV_LIST:")
		if favListStr == "" {
			fmt.Println("üìù –í–∞—à —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
		} else {
			favList := strings.Split(favListStr, ",")
			// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
			c.favoriteUsers = make(map[string]bool)
			for _, user := range favList {
				if user != "" {
					c.favoriteUsers[user] = true
				}
			}
			fmt.Printf("‚ù§Ô∏è –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –ø–∏—Å–∞—Ç–µ–ª–∏ (%d): %s\n", len(favList), strings.Join(favList, ", "))
		}
	} else if message == "FAV_CLEARED" {
		c.favoriteUsers = make(map[string]bool)
		fmt.Println("‚úÖ –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω")
	} else if strings.HasPrefix(message, "FAV_ADDED:") {
		target := strings.TrimPrefix(message, "FAV_ADDED:")
		c.favoriteUsers[target] = true
		fmt.Printf("‚ù§Ô∏è %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π\n", target)
	} else if strings.HasPrefix(message, "FAV_REMOVED:") {
		target := strings.TrimPrefix(message, "FAV_REMOVED:")
		delete(c.favoriteUsers, target)
		fmt.Printf("‚úÖ %s —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π\n", target)
	} else if strings.HasPrefix(message, "FAV_ERROR:") {
		errorMsg := strings.TrimPrefix(message, "FAV_ERROR:")
		fmt.Printf("‚ùå %s\n", errorMsg)
	}
	fmt.Print("> ")
}

func (c *ChatClient) isMessageBlocked(message string) bool {
	for blockedUser := range c.blocked {
		if strings.Contains(message, blockedUser) {
			return true
		}
	}
	return false
}

func (c *ChatClient) printFormattedMessage(message string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ª—é–±–∏–º—ã–º –ø–∏—Å–∞—Ç–µ–ª–µ–º
	isFavorite := false
	var messageSender string

	// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: "–Ω–∏–∫–Ω–µ–π–º: —Å–æ–æ–±—â–µ–Ω–∏–µ")
	if strings.Contains(message, ":") {
		// –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: "–Ω–∏–∫–Ω–µ–π–º: —Å–æ–æ–±—â–µ–Ω–∏–µ"
		if !strings.HasPrefix(message, "[") {
			parts := strings.SplitN(message, ":", 2)
			if len(parts) >= 2 {
				messageSender = strings.TrimSpace(parts[0])
				isFavorite = c.favoriteUsers[messageSender]
			}
		} else {
			// –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: "[–ú–õ–°][–≤—Ä–µ–º—è] –Ω–∏–∫–Ω–µ–π–º: —Å–æ–æ–±—â–µ–Ω–∏–µ" –∏–ª–∏ "[–õ–°][–≤—Ä–µ–º—è] –Ω–∏–∫–Ω–µ–π–º: —Å–æ–æ–±—â–µ–Ω–∏–µ"
			// –ò—â–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "]" –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–Ω–µ–π–º
			lastBracket := strings.LastIndex(message, "]")
			if lastBracket != -1 && lastBracket+1 < len(message) {
				// –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "]"
				textAfterBracket := message[lastBracket+1:]
				// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∏—â–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
				textAfterBracket = strings.TrimSpace(textAfterBracket)
				if strings.Contains(textAfterBracket, ":") {
					parts := strings.SplitN(textAfterBracket, ":", 2)
					if len(parts) >= 2 {
						messageSender = strings.TrimSpace(parts[0])
						isFavorite = c.favoriteUsers[messageSender]
					}
				}
			}
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç
	switch {
	case isFavorite:
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
		fmt.Printf("\n\033[1;33m‚ú® %s\033[0m\n> ", message) // –∑–æ–ª–æ—Ç–æ–π —Å —ç–º–æ–¥–∑–∏
	case strings.HasPrefix(message, "[–õ–°]"):
		fmt.Printf("\n\033[36m%s\033[0m\n> ", message) // –≥–æ–ª—É–±–æ–π
	case strings.HasPrefix(message, "[–ú–õ–°]"):
		fmt.Printf("\n\033[35m%s\033[0m\n> ", message) // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
	default:
		// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fmt.Printf("\n%s\n> ", message)
	}
}

func (c *ChatClient) handleUserList(message string) {
	users := strings.TrimPrefix(message, "USERS:")
	userList := strings.Split(users, ",")

	fmt.Printf("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω (%d):\n", len(userList))
	for _, user := range userList {
		if user != "" {
			status := "üü¢"
			if user == c.nickname {
				status = "üü° (–≤—ã)"
			} else if c.favoriteUsers[user] {
				status = "‚ù§Ô∏è " // –ª—é–±–∏–º—ã–π –ø–∏—Å–∞—Ç–µ–ª—å
			}
			fmt.Printf("%s %s\n", status, user)
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—é–±–∏–º—ã–º –ø–∏—Å–∞—Ç–µ–ª—è–º
	favCount := len(c.favoriteUsers)
	if favCount > 0 {
		var favList []string
		for user := range c.favoriteUsers {
			favList = append(favList, user)
		}
		fmt.Printf("‚ù§Ô∏è  –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –ø–∏—Å–∞—Ç–µ–ª–∏ (%d): %s\n", favCount, strings.Join(favList, ", "))
	}

	fmt.Print("> ")
}

func (c *ChatClient) handleHelp(message string) {
	helpText := strings.TrimPrefix(message, "HELP:")

	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é " | " –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	commands := strings.Split(helpText, " | ")

	fmt.Printf("\n\033[1;34m%s\033[0m\n", "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —á–∞—Ç–∞:")
	fmt.Println(strings.Repeat("‚îÄ", 60))
	fmt.Println("üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")

	for _, cmd := range commands {

		// –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
		if strings.Contains(cmd, " - ") {
			parts := strings.SplitN(cmd, " - ", 2)
			fmt.Printf("\033[1;32m%-25s\033[0m %s\n", parts[0], parts[1])
		} else {
			fmt.Printf("  %s\n", cmd)
		}
	}

	fmt.Println(strings.Repeat("‚îÄ", 60))
	fmt.Print("> ")
}

func (c *ChatClient) cleanup() {
	if c.conn != nil {
		c.conn.Close()
	}
	fmt.Println("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
}

func (c *ChatClient) WaitForInterrupt() {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	<-sigChan
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
	c.running = false
	c.cleanup()
	os.Exit(0)
}

func getServerAddress() (string, int) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Println("=== üí¨ Go –∫–ª–∏–µ–Ω—Ç –¥–ª—è —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–∞ ===")
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost:12345)")
	fmt.Print("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ [localhost]: ")

	serverInput, _ := reader.ReadString('\n')
	serverInput = strings.TrimSpace(serverInput)

	if serverInput == "" {
		return "localhost", 12345
	}

	if strings.Contains(serverInput, ":") {
		parts := strings.Split(serverInput, ":")
		if len(parts) == 2 {
			server := parts[0]
			var port int
			if _, err := fmt.Sscanf(parts[1], "%d", &port); err == nil && port > 0 && port < 65536 {
				return server, port
			}
		}
	}

	return serverInput, 12345
}

func main() {
	server, port := getServerAddress()

	fmt.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s:%d...\n", server, port)

	client := NewChatClient(server, port)
	go client.WaitForInterrupt()

	err := client.Connect()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v\n", err)
		os.Exit(1)
	}
	defer client.cleanup()

	err = client.Login()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: %v\n", err)
		os.Exit(1)
	}

	client.Start()
}
